# ai_entry_logic.py
# ===============================
# „Ç®„É≥„Éà„É™„ÉºÂèØÂê¶„ÅÆ‰∏ÄÊ¨°Âà§ÂÆö„É≠„Ç∏„ÉÉ„ÇØ
# TradingView„ÅÆENTRY_*Âèó‰ø°ÊôÇ„Å´Âëº„Å∞„Çå„Çã
# ===============================

import os, json

ENTRY_MODEL_PATH = "data/entry_stats.json"

DEFAULT_BREAK_PCT   = 0.05   # ÂàùÊúü„Éñ„É¨„Ç§„ÇØÂπÖ(%) 0.1%
DEFAULT_VOL_REQ     = 2.0   # ÂàùÊúü„ÅÆÂá∫Êù•È´òÂÄçÁéá„Åó„Åç„ÅÑÂÄ§ (Âπ≥Âùá„ÅÆ2ÂÄç‰ª•‰∏ä„Åª„Åó„ÅÑ)
DEFAULT_ATR_MIN     = 0.3   # „Éú„É©‰Ωé„Åô„ÅéÈô§Â§ñ
DEFAULT_ATR_MAX     = 30.0   # „Éú„É©È´ò„Åô„ÅéÈô§Â§ñ
DEFAULT_TREND_ABS_P = 0.25  # „Åù„ÅÆË∂≥„ÅåÊúÄ‰Ωé„Åì„Çå„Åè„Çâ„ÅÑ„ÅØÂãï„ÅÑ„Å¶„Å¶„Åª„Åó„ÅÑ(%)

def _load_entry_model():
    """
    ÈäòÊüÑ„Åî„Å®„ÅÆ„Ç®„É≥„Éà„É™„Éº„Åó„Åç„ÅÑÂÄ§„Éï„Ç°„Ç§„É´„ÇíË™≠„ÇÄ„ÄÇ
    ‰æã:
    {
      "7203.T": { "break_pct": 0.09, "vol_mult_req": 1.7 },
      "9984.T": { "break_pct": 0.13, "vol_mult_req": 2.4 }
    }

    ÁÑ°„Åã„Å£„Åü„ÇâÁ©∫{}Ëøî„Åô„ÄÇ
    """
    if not os.path.exists(ENTRY_MODEL_PATH):
        return {}
    try:
        with open(ENTRY_MODEL_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def should_accept_entry(symbol, side, vol_mult, vwap, atr, last_pct):
    """
    ÂÖ•„Çã/‰øùÁïô„ÅÆÂà§Êñ≠„Çí„Åô„ÇãÔºàÂç≥Discord„Åß„Äå„Ç®„É≥„Éà„É™„ÉºÁ¢∫ÂÆöüü¢„ÄçÂá∫„Åô„Åã„ÄÅshadow„Åß‰øùÁïô„ÅãÔºâ„ÄÇ
    ÂÆüÈöõ„ÅØ:
      - ÈäòÊüÑ„Åî„Å®„ÅÆÂ≠¶ÁøíÊ∏à„ÅøÈñæÂÄ§ (entry_stats.json) „Åå„ÅÇ„Çå„Å∞„Åù„Çå„ÇíÂÑ™ÂÖà
      - ÁÑ°„Åë„Çå„Å∞„Éá„Éï„Ç©„É´„ÉàÂÄ§„ÅßÂà§ÂÆö

    ÂºïÊï∞:
      symbol    : "7203.T" „Å®„Åã
      side      : "BUY"/"SELL"
      vol_mult  : „Åù„ÅÆ5ÂàÜË∂≥Âá∫Êù•È´ò / Âπ≥ÂùáÂá∫Êù•È´ò
      vwap      : „Åù„ÅÆÊôÇÁÇπ„ÅÆVWAPÔºà‰ªä„ÅØÊ∑±„Åè‰Ωø„Å£„Å¶„Å™„ÅÑÔºâ
      atr       : ATR(14) „Åø„Åü„ÅÑ„Å™„Éú„É©ÁõÆÂÆâ
      last_pct  : Êú¨Ê∞óË∂≥„ÅÆ‰º∏„Å≥Áéá(%)„ÄÅ„Åñ„Å£„Åè„ÇäÂã¢„ÅÑ
    """

    model = _load_entry_model()
    per_symbol = model.get(symbol, {})

    # Â≠¶ÁøíÊ∏à„Åø„Åå„ÅÇ„Çå„Å∞„Åù„Çå„ÄÅ„Å™„Åë„Çå„Å∞„Éá„Éï„Ç©„É´„Éà
    vol_req   = float(per_symbol.get("vol_mult_req", DEFAULT_VOL_REQ))
    brk_req   = float(per_symbol.get("break_pct",    DEFAULT_BREAK_PCT))

    # --- Âü∫Êú¨„É´„Éº„É´ ---
    strong_vol     = vol_mult >= vol_req              # Âá∫Êù•È´ò„Å°„ÇÉ„Çì„Å®ÂÖ•„Å£„Å¶„Çã„Åã
    trending       = abs(last_pct) >= DEFAULT_TREND_ABS_P  # „Å°„ÇÉ„Çì„Å®Ëµ∞„Å£„Å¶„ÇãË∂≥„Åã
    atr_condition  = (atr == 0) or (DEFAULT_ATR_MIN <= atr <= DEFAULT_ATR_MAX)

    # brk_req „ÅØ„Äå„Åì„ÅÆÈäòÊüÑ„ÅØ„Åì„ÅÆ„Åè„Çâ„ÅÑ„ÅÆ„Éñ„É¨„Ç§„ÇØ„ÅßÂãù„Å¶„Å¶„Çã„Äç„Å£„Å¶Â≠¶ÁøíÂÄ§
    # last_pct „ÅØÂÆüÈöõ‰ªäÂõû„ÅÆË∂≥„ÅÆ‰º∏„Å≥Áéá(Âã¢„ÅÑ)„ÄÇÊñπÂêëÊÄß„ÅåËøë„ÅÑ„Åã„Åñ„Å£„Åè„ÇäË¶ã„Çã„ÄÇ
    # BUY„Å™„Çâ‰∏äÊñπÂêë„ÄÅSELL„Å™„Çâ‰∏ãÊñπÂêë„ÇíÊúüÂæÖ„Åô„Çã„ÅÆ„Åß„ÄÅ
    #   BUY: last_pct Ê≠£ÊñπÂêë„Å´„Åù„Åì„Åù„ÅìÂá∫„Å¶„ÇãÔºü
    #   SELL: last_pct Ë≤†ÊñπÂêë(=‰∏ã„Åí)„Åå„Åù„Åì„Åù„ÅìÂá∫„Å¶„ÇãÔºü
    # „Åü„Å†„Åó last_pct „ÅØ"abs"„Åß„ÇÇ„Åô„Åß„Å´ trending Âà§ÂÆöÊ∏à„Å†„Åã„Çâ„Åì„Åì„Åß„ÅØÂº∑„ÇÅ„Å´Áµû„Çâ„Å™„ÅÑ„ÄÇ
    breakout_ok    = abs(last_pct) >= brk_req

    accept = strong_vol and trending and atr_condition and breakout_ok

    if accept:
        reason = (
            "Âá∫Êù•È´ò/Âã¢„ÅÑ/„Éú„É©OK‚ÜíÂç≥„Ç®„É≥„Éà„É™„ÉºÊé°Áî®\n"
            f"(Ë¶ÅÊ±Çvol‚âß{vol_req:.2f}x, Ë¶ÅÊ±Ç„Éñ„É¨„Ç§„ÇØ‚âß{brk_req:.3f}%)"
        )
    else:
        reason = (
            "Êù°‰ª∂„ÅåÂº±„ÅÑ„ÅÆ„Åß‰øùÁïôÁõ£Ë¶ñÔºàshadowÔºâ\n"
            f"(Ë¶ÅÊ±Çvol‚âß{vol_req:.2f}x, Ë¶ÅÊ±Ç„Éñ„É¨„Ç§„ÇØ‚âß{brk_req:.3f}%)"
        )

    return accept, reason


def should_promote_to_real(position_dict):
    """
    shadow_pending„Çí„ÄåÂæåËøΩ„ÅÑ„ÅßÊ≠£ÂºèÊé°Áî®(real)„Å´ÊòáÊ†º„Åï„Åõ„Çã„ÅãÔºü„Äç„ÇíÂà§ÂÆö„Åô„Çã„ÄÇ
    PRICE_TICK„ÅÆ„Åü„Å≥„Å´„Çµ„Éº„Éê„ÉºÂÅ¥„ÅßÂëº„Å∂Ê∫ñÂÇô„Å´„Å™„Å£„Å¶„Çã„ÄÇ
    „Åì„Åì„Åß„ÅØ„Å®„Çä„ÅÇ„Åà„Åö pct + Âá∫Êù•È´ò„Åå„Å°„ÇÉ„Çì„Å®‰πó„Å£„Å¶„Çã„Åã„Å†„ÅëË¶ã„Çã„ÄÇ
    """
    if not position_dict or position_dict.get("closed"):
        return False
    if position_dict.get("status") != "shadow_pending":
        return False

    ticks = position_dict.get("ticks", [])
    if not ticks:
        return False

    last_tick = ticks[-1]

    pct_now  = float(last_tick.get("pct", 0) or 0)
    vol_now  = float(last_tick.get("volume", 0) or 0)
    atr_now  = float(last_tick.get("atr", 0) or 0)

    # Êù°‰ª∂„Ç§„É°„Éº„Ç∏:
    #   - Êó¢„Å´+0.4%‰ª•‰∏äËá™ÂàÜ„Å´ÊúâÂà©ÊñπÂêë„ÅßÂãï„ÅÑ„Å¶„Çã
    #   - Âá∫Êù•È´ò0„Åò„ÇÉ„Å™„ÅÑ(‰∏ÄÂøúÊµÅÂãïÊÄß„ÅÇ„Çã)
    #   - ATR„ÅåÊ•µÁ´Ø„Å´Ê≠ª„Çì„Åß„Å™„ÅÑ
    gain_ok = pct_now >= 0.4
    vol_ok  = vol_now > 0
    atr_ok  = (atr_now == 0) or (0.2 <= atr_now <= 8.0)

    return gain_ok and vol_ok and atr_ok
